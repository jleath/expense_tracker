#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def add_expense(amount, memo)
    created_on = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @connection.exec_params(sql, [amount, memo, created_on])
  end

  def search_expenses(search_str)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    list_expenses(@connection.exec_params(sql, ["%#{search_str}%"]))
  end

  def list_expenses(expenses = nil)
    if expenses.nil?
      expenses = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    end
    display_count(expenses)
    display_expenses(expenses) unless expenses.ntuples == 0
  end

  def delete_expense(expense_id)
    sql = "DELETE FROM expenses WHERE id = $1;"
    @connection.exec_params(sql, [expense_id])
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
  end

  def expense_exists?(expense_id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @connection.exec_params(sql, [expense_id])
    result.ntuples > 0
  end

  def num_expenses
    sql = "SELECT count(id) FROM expenses;"
    result = @connection.exec(sql)
    result[0]['count'].to_i
  end

  private

  def display_expenses(query_result)
    query_result.each do |tuple| 
      puts expense_details_str(tuple)
    end
    total_amount = query_result.field_values('amount').map(&:to_f).reduce(:+)
    display_amount_total(total_amount.round(2))
  end

  def display_count(query_result)
    if query_result.ntuples == 0
      puts 'There are no expenses.'
    else
      puts "There are #{query_result.ntuples} expenses."
    end
  end
  
  def display_amount_total(amount)
    puts '-' * 50
    puts "Total#{amount.to_s.rjust(26)}"
  end

  def expense_details_str(tuple)
    columns = [ tuple['id'].rjust(3),
                tuple['created_on'].rjust(10),
                tuple['amount'].rjust(12),
                tuple['memo'] ]
    columns.join(' | ')
  end
  
  def setup_schema
    check_exists_sql = <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
      SQL
    if @connection.exec(check_exists_sql)[0]['count'].to_i == 0
      File.open('schema.sql', 'r') { |schema_file| @connection.exec(schema_file.read) }
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end
  
  def run(arguments)
    command = arguments.shift
    case command
    when 'add'
      amount = arguments[0]
      memo = arguments[1]
      abort 'You must provide an amount and memo.' unless amount && memo
      @application.add_expense(amount, memo)
    when 'list'
      @application.list_expenses
    when 'search'
      abort_if_empty
      search_str = arguments[0]
      abort 'You must provide a search term.' unless search_str
      @application.search_expenses(search_str)
    when 'delete'
      expense_id = arguments[0]
      abort 'You must provide the id of the expense you wish to delete.' unless expense_id
      abort "There is no expense with the id #{expense_id}." unless @application.expense_exists?(expense_id)
      @application.delete_expense(expense_id)
    when 'clear'
      abort_if_empty
      if confirm_clear?
        @application.delete_all_expenses
        puts "All expenses have been deleted."
      end
    else
      display_help
    end
  end

  def abort_if_empty
    if @application.num_expenses == 0
      abort "There are no expenses."
    end
  end

  def confirm_clear?
    puts "This will remove all expenses. Are you sure? (y/n)"
    $stdin.getch.downcase == 'y'
  end

  def display_help
    puts <<~HELP.freeze
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
      HELP
  end
end

CLI.new.run(ARGV)